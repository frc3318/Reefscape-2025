// RobotBuilder Version: 6.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: RobotContainer.

package frc.robot;

import com.pathplanner.lib.commands.PathPlannerAuto;
import com.pathplanner.lib.events.EventTrigger;
import com.revrobotics.spark.*;
import com.revrobotics.spark.SparkLowLevel.MotorType;

import edu.wpi.first.math.filter.SlewRateLimiter;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj2.command.button.JoystickButton;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.button.CommandXboxController;
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.Commands;
import edu.wpi.first.wpilibj2.command.InstantCommand;
import frc.robot.autos.ReefscapeAuto;
import frc.robot.commands.AutonomousCommand;
import frc.robot.commands.TeleopSwerve;
import frc.robot.subsystems.Swerve;

/**
 * This class is where the bulk of the robot should be declared. Since
 * Command-based is a
 * "declarative" paradigm, very little robot logic should actually be handled in
 * the {@link Robot}
 * periodic methods (other than the scheduler calls). Instead, the structure of
 * the robot
 * (including subsystems, commands, and button mappings) should be declared
 * here.
 */
public class RobotContainer {


  private static RobotContainer m_robotContainer = new RobotContainer();

  // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
  // The robot's subsystems

  // Joysticks

  // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
  /* Controllers */
  private final CommandXboxController driver = new CommandXboxController(0);

    /* Drive Controls */
    private final int translationAxis = XboxController.Axis.kLeftY.value;
    private final int strafeAxis = XboxController.Axis.kLeftX.value;
    private final int rotationAxis = XboxController.Axis.kRightX.value ;

    /* Limiters */
    private final SlewRateLimiter translationLimiter = new SlewRateLimiter(5.0);
    private final SlewRateLimiter strafeLimiter = new SlewRateLimiter(5.0);
    private final SlewRateLimiter rotationLimiter = new SlewRateLimiter(5.0);

    private final JoystickButton btnShooter = new JoystickButton(driver.getHID(), XboxController.Button.kA.value);

    private final JoystickButton highShooter = new JoystickButton(driver.getHID(), XboxController.Button.kX.value);

    private final JoystickButton zeroGyro = new JoystickButton(driver.getHID(), XboxController.Button.kStart.value);

    private final JoystickButton intakeReset = new JoystickButton(driver.getHID(), XboxController.Button.kY.value);

    private final JoystickButton ClimberUp = new JoystickButton(driver.getHID(), XboxController.Button.kB.value);
    private final JoystickButton ClimberDown = new JoystickButton(driver.getHID(), XboxController.Button.kBack.value);

    private final JoystickButton ArmOut = new JoystickButton(driver.getHID(), XboxController.Button.kRightStick.value);
    private final JoystickButton ArmIn = new JoystickButton(driver.getHID(), XboxController.Button.kLeftStick.value);

    /* Motor Controller */
    private final SparkMax ExtakeMotor = new SparkMax(9, MotorType.kBrushless);
    private final SparkMax ClimbMotor = new SparkMax(21, MotorType.kBrushless);
    private final SparkMax Arm = new SparkMax(10, MotorType.kBrushed);

  /* Subsystems */
  public final Swerve s_Swerve = new Swerve();


  /**
   * The container for the robot. Contains subsystems, OI devices, and commands.
   */

  private RobotContainer() {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SMARTDASHBOARD
    // Smartdashboard Subsystems

    // SmartDashboard Buttons
    SmartDashboard.putData("Autonomous Command", new AutonomousCommand());

    new EventTrigger("extake").whileTrue(new InstantCommand(() -> ExtakeMotor.set(-0.8)));

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SMARTDASHBOARD

    // Register Named Commands *TODO change when subsystems are added



    s_Swerve.setDefaultCommand(
        new TeleopSwerve(
            s_Swerve,
            () -> translationLimiter.calculate(driver.getRawAxis(translationAxis)),
            () -> strafeLimiter.calculate(driver.getRawAxis(strafeAxis)),
            () -> rotationLimiter.calculate(driver.getRawAxis(rotationAxis)/2),
            () -> false));


    btnShooter.onTrue(new InstantCommand(() -> ExtakeMotor.set(-.6)));
    btnShooter.onFalse(new InstantCommand(() -> ExtakeMotor.set(0)));

    highShooter.onTrue(new InstantCommand(() -> ExtakeMotor.set(-1)));
    highShooter.onFalse(new InstantCommand(() -> ExtakeMotor.set(0)));

    zeroGyro.onTrue(new InstantCommand(() -> s_Swerve.zeroHeading()));

    intakeReset.onTrue(new InstantCommand(() -> ExtakeMotor.set(2)));
    intakeReset.onFalse(new InstantCommand(() -> ExtakeMotor.set(0)));

    ClimberUp.onTrue(new InstantCommand(() -> ClimbMotor.set(.5)));
    ClimberUp.onFalse(new InstantCommand(() -> ClimbMotor.set(0)));

    ClimberDown.onTrue(new InstantCommand(() -> ClimbMotor.set(-.5)));
    ClimberDown.onFalse(new InstantCommand(() -> ClimbMotor.set(0)));

    ArmOut.onTrue(new InstantCommand(() -> Arm.set(-1)));
    ArmOut.onFalse(new InstantCommand(() -> Arm.set(0)));

    ArmIn.onTrue(new InstantCommand(() -> Arm.set(.5)));
    ArmIn.onFalse(new InstantCommand(() -> Arm.set(0)));

    
    // robotCentric.getAsBoolean() ---> false
    // Configure the button bindings
   // private void configureButtonBindings()

    // Configure default commands
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SUBSYSTEM_DEFAULT_COMMAND

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SUBSYSTEM_DEFAULT_COMMAND

    // Configure autonomous sendable chooser
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
    
  }

  public static RobotContainer getInstance() {
    return m_robotContainer;
  }

  public Command getAutonomousCommand() {
   // return new ReefscapeAuto(s_Swerve, ExtakeMotor);
    return new PathPlannerAuto("Center Start 4 Coral");

  }

  /**
   * Use this method to define your button->command mappings. Buttons can be
   * created by
   * instantiating a {@link GenericHID} or one of its subclasses ({@link
   * edu.wpi.first.wpilibj.Joystick} or {@link XboxController}), and then passing
   * it to a
   * {@link edu.wpi.first.wpilibj2.command.button.JoystickButton}.
   */
 // private void configureButtonBindings() {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=BUTTONS
    // Create some buttons

    // zeroGyro.onTrue(new InstantCommand(() -> s_Swerve.zeroHeading()));

    // slowDown.onTrue(new InstantCommand(() -> s_Swerve.slow()));

//  }

  // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

  // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

  /**
   * Use this to pass the autonomous command to the main {@link Robot} class.
   *
   * @return the command to run in autonomous
   */

}
